def propertyFiles = ['build.properties']

def allDependencies = [
    'android4.jar', 
    'commons-collections-3.2.jar'
]

projectLibsDir = new File(rootProject.projectDir, 'lib')

configurations {
    loadPropertiesFromFiles(propertyFiles)
    project.version = buildVersion
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-7'
}

task downloadLibs << {
    println 'Downloading libraries...'
    projectLibsDir.mkdirs()
    allDependencies.each { library ->
        def libFile = new File(projectLibsDir, library)
        if (!libFile.exists()) {
            def libUrl = remoteRepoSitoryUrl + library
            println 'Downloading ' + library + ' to ' + libFile + ' from ' + libUrl
            def tempFile = new File(projectLibsDir, library + '.temp')
            ant.get(src: libUrl, dest: tempFile.path, verbose:true)
            tempFile.renameTo(libFile)
        } else {
            println 'Skip downloading ' + library + '. It has already exist in local repository'
        }
    }
}

task eclipse(dependsOn: 'clearEclipse') << {
    project.subprojects.each { subproject ->
        subproject.tasks.each { task ->
            if (task.name == 'eclipse') {
                subproject.tasks['eclipse']
            }
        }
    }  
}

task clearEclipse << {
    def eclipseArtifacts = ['.classpath', '.project']
    project.subprojects.each { subproject ->
        subproject.tasks.each { task ->
            if (task.name == 'eclipse') {
                eclipseArtifacts.each { artifact ->
                    def artifactFile = new File(subproject.projectDir, artifact)
                    if (artifactFile.exists()) {
                        artifactFile.delete();
                    }
                }
            }
        }
    }
}

def loadPropertiesFromFiles(List files) {
    files.each { propertyFileName ->
        def propertyFile = new File(rootProject.projectDir, propertyFileName)
        if(propertyFile.exists()) { 
            propertyFile.withReader { reader ->
                def props = new Properties()
                props.load(reader)
                props.each { property ->
                    project.setProperty(property.key, property.value)
                }
            }
        } else {
            println 'File not found ' + propertyFile
        }
    }
}